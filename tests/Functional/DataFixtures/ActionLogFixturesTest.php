<?php

namespace App\Tests\Functional\DataFixtures;

use App\DataFixtures\ActionLogFixtures;
use App\DataFixtures\Admin\UserFixtures;
use App\Repository\ActionLogChangeRepository;
use App\Repository\ActionLogRepository;
use Doctrine\Common\DataFixtures\ReferenceRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\Console\Input\StringInput;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

/**
 * @covers \App\DataFixtures\ActionLogFixtures
 */
class ActionLogFixturesTest extends WebTestCase
{
    protected function setUp(): void
    {
        $client = static::createClient();

        $application = new Application($client->getKernel());
        $application->setAutoExit(false);

        // Reset the database.
        $application->run(new StringInput('doctrine:database:drop --force --quiet'));
        $application->run(new StringInput('doctrine:database:create --quiet'));
        $application->run(new StringInput('doctrine:schema:create --quiet'));

        parent::setUp();
    }

    /**
     * @covers \App\DataFixtures\ActionLogFixtures::load
     */
    public function testFixturesWithoutReferenceRepository(): void
    {
        /** @var EntityManagerInterface $entityManager */
        $entityManager = static::$container->get(EntityManagerInterface::class);

        $this->expectException(\Error::class);
        $this->expectExceptionMessage('Call to a member function getReference() on null');

        $fixtures = new ActionLogFixtures();
        $fixtures->load($entityManager);
    }

    /**
     * @covers \App\DataFixtures\ActionLogFixtures::load
     */
    public function testFixturesWithoutUserFixtures(): void
    {
        /** @var EntityManagerInterface $entityManager */
        $entityManager = static::$container->get(EntityManagerInterface::class);

        $referenceRepository = new ReferenceRepository($entityManager);
        $fixtures = new ActionLogFixtures();
        $fixtures->setReferenceRepository($referenceRepository);

        $this->expectException(\OutOfBoundsException::class);
        $this->expectExceptionMessage('Reference to "'.UserFixtures::REFERENCE_ADMIN.'" does not exist');

        $fixtures->load($entityManager);
    }

    /**
     * @covers \App\DataFixtures\ActionLogFixtures::load
     */
    public function testFixtures(): void
    {
        /** @var EntityManagerInterface $entityManager */
        $entityManager = static::$container->get(EntityManagerInterface::class);
        /** @var ActionLogRepository $actionLogRepository */
        $actionLogRepository = static::$container->get(ActionLogRepository::class);
        /** @var ActionLogChangeRepository $actionLogRepository */
        $actionLogChangeRepository = static::$container->get(ActionLogChangeRepository::class);
        /** @var UserPasswordEncoderInterface $passwordEncoder */
        $passwordEncoder = static::$container->get(UserPasswordEncoderInterface::class);

        $actionLogs = $actionLogRepository->findAll();
        $this->assertCount(0, $actionLogs);
        $actionLogChanges = $actionLogChangeRepository->findAll();
        $this->assertCount(0, $actionLogChanges);

        $referenceRepository = new ReferenceRepository($entityManager);
        $userFixtures = new UserFixtures($passwordEncoder);
        $userFixtures->setReferenceRepository($referenceRepository);
        $userFixtures->load($entityManager);
        $fixtures = new ActionLogFixtures();
        $fixtures->setReferenceRepository($referenceRepository);
        $fixtures->load($entityManager);

        // Ignore the exact amount of action logs without an user, there are a bunch of them generated by dependent fixtures.
        $actionLogs = $actionLogRepository->findAll();
        $this->assertGreaterThan(4, $actionLogs);
        $actionLogs = $actionLogRepository->findBy([
            'user' => $userFixtures->getReference(UserFixtures::REFERENCE_ADMIN),
        ]);
        $this->assertCount(4, $actionLogs);
        $actionLogChanges = $actionLogChangeRepository->findAll();
        $this->assertCount(3, $actionLogChanges);
    }
}
